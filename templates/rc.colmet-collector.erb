#! /bin/sh
#
# chkconfig: 2345 90 10
# description: This script starts or stops the colmet collector
# processname: colmet-collector
# pidfile: /var/run/colmet-collector.pid


### BEGIN INIT INFO
# Provides:          colmet-collector
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Default-Start:     S 2 3 4 5
# Default-Stop:      0 1 6
# X-Start-Before: oar-node
# X-Stop-After: oar-node
# Short-Description: Colmet collector
# Description:       This script starts or stops the colmet collector
### END INIT INFO

LANG=C
export LANG

PATH=/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin:$PATH

DEFAULTCONF=/etc/default/colmet-collector

DAEMON_START="1"
DESC="Colmet collector"
PIDFILE=/var/run/colmet-collector.pid
LOGFILE=/var/log/colmet/collector.log
DAEMON=$(which colmet-collector)
DAEMON_OPTS="-vvv --zeromq-bind-uri tcp://127.0.0.1:5556 --hdf5-filepath /data/colmet.hdf5 --hdf5-complevel 9"

# Read configuration variable file if it is present
[ -r "$DEFAULTCONF" ] && . "$DEFAULTCONF"

NOLSB=

[ -f /lib/lsb/init-functions ] || NOLSB=yes

if [ -z "$NOLSB" ]; then
    . /lib/lsb/init-functions
    fail_msg() {
        echo ""
        log_failure_msg "$@"
    }
    warn_msg() {
        log_warning_msg "$@"
    }
    succ_msg() {
        log_success_msg "$@"
    }
    begin_msg() {
        echo -n "$@:"
    }
else
    echo "This system doesn't provide the LSB functions. Failing"
    exit 2
fi


# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

do_start()
{
	begin_msg "Starting the colmet collector"
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	if [ "$DAEMON_START" != "1" ]; then
		warn_msg "Autostart disabled."
		return 0
	fi

        [ ! -d "$(dirname $LOGFILE)" ] && mkdir -p "$(dirname $LOGFILE)"

        start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE --background \
         --startas /bin/bash -- -c "exec $DAEMON $DAEMON_OPTS > $LOGFILE 2>&1"

        if [ "$?" != 0 ]; then
            fail_msg "Unable to start"
        else
            succ_msg
        fi
	return 0
}

do_stop() {
    begin_msg "Stopping $DESC"
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    start-stop-daemon --stop --quiet --pidfile $PIDFILE 
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    
    succ_msg
    return "$RETVAL"

    return 0
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    reload|restart|force-reload)
        if do_stop; then
            sleep 1
            do_start
        fi
        ;;
    status)
        status_of_proc $DAEMON "$DESC"
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
        exit 1
        ;;
esac

:

