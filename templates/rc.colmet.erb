#!/bin/sh
################################################################################
# /etc/init.d/colmet
# colmet init script
#
################################################################################
#  /!\ DO NOT EDIT THIS FILE: it has been automatically generated by Puppet.
#      In particular, any further changes will be overwritten at the next puppet
#      invocation
################################################################################
# Source:
# https://github.com/ether/etherpad-lite/wiki/How-to-deploy-Etherpad-Lite-as-a-service

### BEGIN INIT INFO
# Provides:          colmet
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts colmet
# Description:       starts colmet using start-stop-daemon
### END INIT INFO

PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
DESC="Colmet"
NAME="colmet"

if [ -r /etc/default/colmet ]; then
    . /etc/default/colmet
fi

test -z "$LOGFILE"             && LOGFILE=/var/log/colmet.log
test -z "$USER"                && USER=colmet
test -z "$GROUP"               && GROUP=colmet

test -z "$ZEROMQ_URI"          && ZEROMQ_URI=tcp://localhost:5556
test -z "$HDF5_PATH"           && HDF5_PATH=/var/log/colmet_log_`date +%s`.h5
test -z "$COMPRESSION_OPTIONS" && COMPRESSION_OPTIONS='--hdf5-output-complevel=9 --hdf5-output-complib=zlib'
test -z "$SAMPLING_PERIOD"     && SAMPLING_PERIOD='-s 10'

PIDFILE=/var/run/$NAME.pid

COLMET_BIN=`which colmet`
COLMET_AGGREGATION_OPTS="-vvv $SAMPLING_PERIOD -i zeromq --zeromq-uri $ZEROMQ_URI -o hdf5 --hdf5-output-filepath=$HDF5_PATH $COMPRESSION_OPTIONS --logfile=$LOGFILE --pidfile=$PIDFILE --daemon"

set -e

. /lib/lsb/init-functions


start() {
  echo "Starting $DESC... "
  touch $PIDFILE && chown $USER:$GROUP $PIDFILE
  start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile $PIDFILE --exec "$COLMET_BIN" -- $COLMET_AGGREGATION_OPTS || true
  echo "done"
}

#We need this function to ensure the whole process tree will be killed
killtree() {
    local _pid=$1
    local _sig=${2-TERM}
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child} ${_sig}
    done
    kill -${_sig} ${_pid}
}

stop() {
  echo "Stopping $DESC... "
   while test -d /proc/$(cat $PIDFILE); do
    killtree $(cat $PIDFILE) 15
    sleep 0.5
  done
  rm $PIDFILE
  echo "done"
}

status() {
  status_of_proc -p $PIDFILE "" "$NAME" && exit 0 || exit $?
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: $NAME {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
